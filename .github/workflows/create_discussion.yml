# @usage
#
# on:
#   schedule:
#     - cron: "0 0 * * mon"
# jobs:
#   create_discussion:
#     uses: route06/actions/.github/workflows/create_discussion.yml@v2
#     with:
#         target_day: sunday
#         owner: route06
#         repository_name: professional-service-div-template
#         title: ハドル
#         discussion_category_slug: meeting-notes
#         description_template_path: _templates/weekly_meeting_discussion/test.md

name: Create discussion

on:
  workflow_call:
   inputs: 
    target_day:
      description: MTG開催曜日に合わせて変更してください。
      required: true
      type: string
    repository:
      description: Discussionを作成するリポジトリ情報です。実行リポジトリの情報をデフォルトで設定します。
      default: ${{ github.repository }}
      type: string
    title:
      description: 作成するDiscussionのタイトルを設定してください（yyyy/mm/dd が接頭辞として自動付与されます）。
      required: true
      type: string
    discussion_category_slug:
      description: 作成するDiscussionのカテゴリslugを設定してください。
      default: meeting-notes
      type: string
    description_template_path:
      description: 作成するDiscussionの説明文に利用するテンプレートファイルのパスを設定してください。
      required: true
      type: string

jobs:
  create_discussion:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TZ: "Asia/Tokyo"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Get next meeting date"
        id: get_date
        run: |
          target_date=$(date -d "next ${{ inputs.target_day }}" +%Y/%m/%d)
          echo "target_date=$target_date" >> "$GITHUB_OUTPUT"

      - name: Run script
        env:
          TARGET_DATE: ${{ steps.get_date.outputs.target_date }}
          REPOSITORY: ${{ inputs.repository }}
          DISCUSSION_CATEGORY_SLUG: ${{ inputs.discussion_category_slug }} 
          TITLE: ${{ inputs.title }}
          DESCRIPTION_TEMPLATE_PATH: ${{ inputs.description_template_path }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");

            /**
            * @param {object} github 
            * @param {string} owner 
            * @param {string} repositoryName 
            * @returns
            */
            async function featchRepoIdAndDiscussionCategoryId(github, owner, repositoryName, discussionCategorySlug) {
              const result = await github.graphql(`query($owner:String!, $repositoryName:String!, $discussionCategorySlug:String!) {
                repository(owner: $owner, name: $repositoryName) {
                  id
                  discussionCategory(slug: $discussionCategorySlug) {
                    id
                  }
                }
              }`, {
                owner: owner,
                repositoryName: repositoryName,
                discussionCategorySlug: discussionCategorySlug,
              });

              return {repositoryId: result.repository.id, categoryId: result.repository.discussionCategory.id};
            }

            async function createWeeklyReportDiscussion(github, repositoryId, categoryId, title, description) {
              const result = await github.graphql(`mutation($repositoryId:ID!, $categoryId:ID!, $title:String!, $body:String!) {
                createDiscussion(input: {repositoryId: $repositoryId, categoryId: $categoryId, title: $title, body: $body}) {
                  discussion {
                    id
                  }
                }
              }`, {
                repositoryId: repositoryId,
                categoryId: categoryId,
                title: title,
                body: description
              });
            }

            const { REPOSITORY, DISCUSSION_CATEGORY_SLUG, TARGET_DATE, TITLE, DESCRIPTION_TEMPLATE_PATH } = process.env;
            const [owner, repositoryName] = REPOSITORY.split('/');

            const repositoryIdAndCategoryId = await featchRepoIdAndDiscussionCategoryId(
              github,
              owner,
              repositoryName,
              DISCUSSION_CATEGORY_SLUG,
            )

            const discussionTitle = `${TARGET_DATE} ${TITLE}`;
            const description = fs.readFileSync(DESCRIPTION_TEMPLATE_PATH, "utf8");

            const discussionId = await createWeeklyReportDiscussion(
              github,
              repositoryIdAndCategoryId.repositoryId,
              repositoryIdAndCategoryId.categoryId,
              discussionTitle,
              description,
            );
