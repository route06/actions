# todo: 以下はStarter Workflow化する
# @usage
#
# name: Create GitHub discussion
#
# on:
#   schedule:
#     # 毎週水曜 13:00 JST に実行
#     - cron: "0 4 * * wed"
#
# jobs:
#   get_next_meeting_date:
#     uses: route06/actions/.github/workflows/calc_next_date.yml@v2
#     with:
#       interval: weekly
#       target_day: wednesday # NOTE: MTG開催曜日に合わせて変更してください
#
#   create_discussion:
#     needs: get_next_meeting_date
#     uses: route06/actions/.github/workflows/create_gh_discussion.yml@v2
#     with:
#       # NOTE: 作成するDiscussionのタイトルを指定
#       title: ${{ needs.get_next_meeting_date.outputs.next_date }} Meeting Title
#       # NOTE: category_slugについては補足参照
#       category_slug: ideas
#       # NOTE: 作成するDiscussionで使用するテンプレートファイルのパスを指定
#       description_template_path: _templates/weekly_meeting_discussion/test.md
#
# 補足:
# category_slug は各カテゴリを選択した時の、URL 末尾の文字列です。以下は例です。
# カテゴリ `Q&A` の slug は `q-a`:
#   https://github.com/<org>/<repo>/discussions/categories/q-a
# カテゴリ `Show and tell` の slug は `show-and-tell`:
#   https://github.com/<org>/<repo>/discussions/categories/show-and-tell

name: Create GitHub discussion

on:
  workflow_call:
    inputs:
      title:
        description: 作成するDiscussionのタイトルを設定してください。
        required: true
        type: string
      category_slug:
        description: 作成するDiscussionのカテゴリslugを設定してください。
        default: general
        type: string
      description_template_path:
        description: 作成するDiscussionの説明文に利用するテンプレートファイルのパスを設定してください。
        required: true
        type: string

jobs:
  create_discussion:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run script
        id: create_discussion
        env:
          REPOSITORY: ${{ github.repository }}
          CATEGORY_SLUG: ${{ inputs.category_slug }}
          TITLE: ${{ inputs.title }}
          DESCRIPTION_TEMPLATE_PATH: ${{ inputs.description_template_path }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");

            async function featchRepoIdAndDiscussionCategoryId(github, owner, repositoryName, discussionCategorySlug) {
              const result = await github.graphql(`query($owner:String!, $repositoryName:String!, $discussionCategorySlug:String!) {
                repository(owner: $owner, name: $repositoryName) {
                  id
                  discussionCategory(slug: $discussionCategorySlug) {
                    id
                  }
                }
              }`, {
                owner: owner,
                repositoryName: repositoryName,
                discussionCategorySlug: discussionCategorySlug,
              });

              return {repositoryId: result.repository.id, categoryId: result.repository.discussionCategory.id};
            }

            async function createDiscussion(github, repositoryId, categoryId, title, description) {
              const result = await github.graphql(`mutation($repositoryId:ID!, $categoryId:ID!, $title:String!, $body:String!) {
                createDiscussion(input: {repositoryId: $repositoryId, categoryId: $categoryId, title: $title, body: $body}) {
                  discussion {
                    id
                  }
                }
              }`, {
                repositoryId: repositoryId,
                categoryId: categoryId,
                title: title,
                body: description
              });

              return result;
            }

            const { REPOSITORY, CATEGORY_SLUG, TITLE, DESCRIPTION_TEMPLATE_PATH } = process.env;
            const [owner, repositoryName] = REPOSITORY.split('/');

            const repositoryIdAndCategoryId = await featchRepoIdAndDiscussionCategoryId(
              github,
              owner,
              repositoryName,
              CATEGORY_SLUG,
            )

            const discussionTitle = TITLE;

            const description = (() => {
              const DEFAULT_DESCRIPTION = '<!-- Write description here -->';
              try {
                const desc = fs.readFileSync(DESCRIPTION_TEMPLATE_PATH, "utf8");
                return desc.trim() === '' ? DEFAULT_DESCRIPTION : desc;
              } catch (error) {
                if (error.code === 'ENOENT') {
                  console.error("Error reading description template file:", error);
                  return DEFAULT_DESCRIPTION;
                }
                else {
                  throw error;
                }
              }
            })();

            const discussionId = await createDiscussion(
              github,
              repositoryIdAndCategoryId.repositoryId,
              repositoryIdAndCategoryId.categoryId,
              discussionTitle,
              description,
            );

            console.log('== START ==');
            console.log(discussionId);
            console.log('== END ==');

            core.setOutput("discussion_id", discussionId);
